{"version":3,"sources":["listContacts.js","App.js","registerServiceWorker.js","index.js"],"names":["ListContacts","props","react_default","a","createElement","className","contactsList","map","contact","key","style","backgroundImage","concat","onClick","onDeleteContact","App","state","contacts","id","name","handle","avatarURL","removeContact","_this","setState","currentState","filter","currContact","listContacts","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oMAkCeA,MAhCf,SAAsBC,GAClB,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAY,gBAIRJ,EAAMK,aAAaC,IAAI,SAAAC,GAAO,OAG1BN,EAAAC,EAAAC,cAAA,MAAIK,IAAOD,EAAO,GAAQH,UAAY,qBAClCH,EAAAC,EAAAC,cAAA,OACIC,UAAY,iBACZK,MAAS,CACLC,gBAAe,OAAAC,OAASJ,EAAO,UAAhB,QAGvBN,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBACbH,EAAAC,EAAAC,cAAA,SAAII,EAAO,MACXN,EAAAC,EAAAC,cAAA,SAAII,EAAO,SAEfN,EAAAC,EAAAC,cAAA,UACIC,UAAY,iBACZQ,QAAWZ,EAAMa,gBAAgBN,IAFrC,eCuBTO,6MAzCbC,MAAQ,CACNC,SAAU,CACR,CACEC,GAAM,QACNC,KAAQ,gBACRC,OAAU,gBACVC,UAAa,mCAEf,CACEH,GAAM,UACNC,KAAQ,mBACRC,OAAU,kBACVC,UAAa,qCAEf,CACEH,GAAM,QACNC,KAAQ,iBACRC,OAAU,gBACVC,UAAa,uCAKnBC,cAAgB,SAACd,GACfe,EAAKC,SAAS,SAACC,GAAD,MAAmB,CAC/BR,SAAUQ,EAAaR,SAASS,OAAO,SAAAC,GAAW,OAAIA,EAAW,KAAWnB,EAAO,iFAKrF,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,CACEtB,aAAgBuB,KAAKb,MAAMC,SAC3BH,gBAAmBe,KAAKP,wBAnChBQ,aCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfuB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA1B,OAAM+C,GAAN,sBAEP5B,GAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBkC","file":"static/js/main.cb4a94b1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ListContacts(props) {\r\n    return (\r\n        <ol className = 'contact-list'>\r\n            {\r\n                // Parentheses after arrow function treats it as one component. Hence, it will implicitly return <li> object.\r\n                // If we used curly braces, we would have to use the `return` statement explicitly.\r\n                props.contactsList.map(contact => (\r\n                    // Notice there are two curly braces in the style tag.\r\n                    // First means we are entering into JavaScript. Second means we are passing an object to the `style` tag.\r\n                    <li key = {contact['id']} className = 'contact-list-item'>\r\n                        <div\r\n                            className = 'contact-avatar'\r\n                            style = {{\r\n                                backgroundImage: `url(${contact['avatarURL']})`\r\n                            }}\r\n                        ></div>\r\n                        <div className = 'contact-details'>\r\n                            <p>{contact['name']}</p>\r\n                            <p>{contact['handle']}</p>\r\n                        </div>\r\n                        <button\r\n                            className = 'contact-remove'\r\n                            onClick = {props.onDeleteContact(contact)}>\r\n                                Remove\r\n                        </button>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ol>\r\n    );\r\n}\r\n\r\nexport default ListContacts;","import React, { Component } from 'react';\r\nimport ListContacts from './listContacts';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        \"id\": \"karen\",\r\n        \"name\": \"Karen Isgrigg\",\r\n        \"handle\": \"karen_isgrigg\",\r\n        \"avatarURL\": \"http://localhost:5001/karen.jpg\"\r\n      },\r\n      {\r\n        \"id\": \"richard\",\r\n        \"name\": \"Richard Kalehoff\",\r\n        \"handle\": \"richardkalehoff\",\r\n        \"avatarURL\": \"http://localhost:5001/richard.jpg\"\r\n      },\r\n      {\r\n        \"id\": \"tyler\",\r\n        \"name\": \"Tyler McGinnis\",\r\n        \"handle\": \"tylermcginnis\",\r\n        \"avatarURL\": \"http://localhost:5001/tyler.jpg\"\r\n      }\r\n     ]\r\n  }\r\n\r\n  removeContact = (contact) => {\r\n    this.setState((currentState) => ({\r\n      contacts: currentState.contacts.filter(currContact => currContact['id'] !== contact['id'])\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ListContacts\r\n          contactsList = {this.state.contacts}\r\n          onDeleteContact = {this.removeContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content would have been purged and\r\n              // the fresh content would have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't, reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}